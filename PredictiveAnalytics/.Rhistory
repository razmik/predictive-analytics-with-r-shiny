shiny::runApp()
runApp()
runApp()
runApp()
intall.packages("DT")
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
knitr::opts_chunk$set(echo = TRUE)
corrplot(cor(boston_dataset))
boston_dataset = read.csv(file="BostonHousingReduced.csv", header=TRUE, sep=",")
corrplot(cor(boston_dataset))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pairs(~ mvalue + lstat + pt + tax + indus + crim + rooms, data = boston_dataset, main = "Boston Housing Attribute correlation")
install.packages("ggcorplot")
runApp()
hist(boston_dataset$mvalue)
plot(density(boston_dataset$mvalue))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
set.seed(2)
split <- sample.split(boston_dataset,SplitRatio =0.75)
train <- subset(boston_dataset,split==TRUE)
test <- subset(boston_dataset,split==FALSE)
model <- lm(mvalue ~ lstat + pt + tax + rooms + indus + crim, data = train)
summary(model)
res <- residuals(model)
# Convert residuals to a DataFrame
res <- as.data.frame(res)
ggplot(res,aes(res)) +  geom_histogram(fill='blue',alpha=0.5)
plot(model)
test$predicted.mvalue <- predict(model,test)
pl1 <-test %>%
ggplot(aes(mvalue,predicted.mvalue)) +
geom_point(alpha=0.5) +
stat_smooth(aes(colour='black')) +
xlab('Actual value of mvalue') +
ylab('Predicted value of mvalue')+
theme_bw()
ggplotly(pl1)
runApp()
runApp()
runApp()
runApp()
names(iris)
names(iris)[0:3]
runApp()
runApp()
runApp()
runApp()
error <- test$mvalue-test$predicted.mvalue
rmse <- sqrt(mean(error)^2)
print(paste("Root Mean Square Error: ", rmse))
runApp()
runApp()
runApp()
runApp()
test$predicted.mvalue <- predict(model,test)
print(mvalue)
test$predicted.mvalue <- predict(model,test)
print(aes(mvalue,predicted.mvalue))
pl1 <-test %>%
ggplot(aes(mvalue,predicted.mvalue)) +
geom_point(alpha=0.5) +
stat_smooth(aes(colour='black')) +
xlab('Actual value of mvalue') +
ylab('Predicted value of mvalue')+
theme_bw()
ggplotly(pl1)
test$predicted.mvalue <- predict(model,test)
print(aes(mvalue,predicted.mvalue))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
